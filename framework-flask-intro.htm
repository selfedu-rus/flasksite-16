<p>Для тех кто не
совсем знаком с принципом взаимодействия между клиентом (браузером) и
фреймворком, установленном на сервере, опишу в двух словах этот процесс. 

<p>Когда
пользователь вводит в браузер строку запроса, например, vk.com, то от браузера
отправляется запрос к серверу, где расположен и работает этот сайт. Здесь мы
отложим в сторону вопрос маршрутизации и DNS-серверов,
сейчас это неважно, главное, что сеть Интернет так устроена, что маршрутизаторы
«знают» куда направлять запросы, если они относятся к работающим сайтам.

<p align=center><img width=623  height=327 id="Рисунок 4" src="framework-flask-intro.files/image001.jpg">

<p>Сервер постоянно
находится в режиме ожидания очередного запроса и как только он приходит,
формирует ответ клиенту, как правило, в виде HTML-документа. Этот
документ возвращается в браузер и пользователь видит на экране устройства
заветную страницу.

<p>Но где же во
всей этой схеме фреймворк? В действительности он установлен на сервере. Так как
это обычный компьютер (ну может не совсем обычный, но принцип тот же), то на
нем установлено соответствующее программное обеспечение. Мы, опять же, не будем
здесь глубоко вдаваться в подробности, скажу лишь, что на них часто
устанавливают Linux-подобные ОС
(благодаря их надежности), затем программу под названием веб-сервер (часто это Apache или Nginx) и уже он
отдает обработку запроса конкретному фреймворку:

<p align=center><img width=623  height=291 id="Рисунок 7" src="framework-flask-intro.files/image002.jpg">

<p>Здесь WSGI (Web Server Gateway Interface) — стандарт
взаимодействия между Python-программой, выполняющейся на
стороне сервера, и самим веб-сервером, например Apache. Фактически,
это интерпретатор Python, который запускает WSGI-приложение,
написанное на Flask.

<p>При поступлении
запроса активизируется WSGI-приложение, выполняется определенный
обработчик, который еще называется «Представление» и реализованный в виде
функции на языке Python. Соответственно, если приходит сразу
несколько запросов, то одна и та же функция-обработчик может быть запущена в
параллельных потоках. Многопоточность – это норма для фреймворков, поэтому,
работая с представлениями во Flask, всегда следует это учитывать. 

<p>Конечно, в
рамках наших занятий мы не будем использовать удаленный сервер и устанавливать
на него данный фреймворк – это отдельная задача. Кстати, современные хостеры
предоставляют инструментарий для простой установки и настройки Flask. Поэтому этот
процесс не представляет больших сложностей. А для изучения данного пакета на
домашнем ПК от вас потребуется только его установить, используя установщик pip:

<p align=center>pip install Flask

<p>Теперь мы можем
написать свое первое WSGI-приложение. В самом простом варианте
оно выглядит так:

<p>from flask import Flask
<br>
<br>app = Flask(__name__)
<br>
<br>if __name__ == &quot;__main__&quot;:
<br>    app.run(debug=True)

<p>Вначале идет
импорт класса Flask, который,
фактически и формирует это приложение. Далее, мы создаем экземпляр этого класса
и первым аргументом должны указать имя нашего приложения. Если вся программа
пишется в одном файле, то следует передавать директиву __name__, которая в
случае импорта будет содержать имя текущего файла, а в случае самостоятельного
запуска – значение «__main__». Для Flask это имеет
принципиальное значение, в частности, от этого зависит где искать подкаталоги с
шаблонами и статичными документами.

<p>После этого
выполняется запуск фреймворка методом run и в качестве параметра
указывается debug=True, чтобы мы в браузере
видели все ошибки, которые будут возникать при разработке сайта-приложения. Конечно,
после его создания, здесь следует прописать debug=False, чтобы
случайные ошибки реальный пользователь уже не видел. 

<p>И, наконец,
условие. Зачем оно? Смотрите, когда мы непосредственно запускаем наш модуль, то
директива __name__ будет
принимать значение «__main__» и будет запущен локальный веб-сервер
для отладки текущего приложения. Если же модуль запускается, например, на
удаленном сервере, то нам не нужно запускать еще один сервер. В этом случае
директива __name__ будет
принимать имя данного модуля и строчка app.run выполнена не
будет. То есть, мы это условие прописали с целью запуска приложения
непосредственно на локальном устройстве.

<p>Соответственно, как
только фреймворк запущен, у нас активизируется локальный веб-сервер и мы можем
в браузере создавать запрос, используя вот такой начальный адрес:

<p align=center>http://127.0.0.1:5000/

<p>Давайте сделаем
это и посмотрим, что получится. Наберем в браузере указанный запрос и видим,
что запрашиваемая страница не найдена:

<p align=center><img width=623  height=174 id="Рисунок 8" src="framework-flask-intro.files/image003.jpg">

<p>Все верно, так и
должно быть, так как мы в программе не создали еще ни одного представления.
Сделаем и это, добавим его:

<p>@app.route(&quot;/&quot;)
<br>def index():
<br>    return &quot;index&quot;

<p>Здесь
используется специальный декоратор route, который
создает обертку вокруг нашей функции index, которая будет
активизироваться при обращении к главной странице сайта, то есть, по запросу http://127.0.0.1:5000/

<p>Запустим
программу, обновим страницу и теперь в браузере видим то, что возвратила
функция index:

<p align=center><img width=623  height=174 id="Рисунок 11" src="framework-flask-intro.files/image004.jpg">

<p>Часто к главной
странице обращаются еще по index, то есть:

<p align=center>domain/index

<p>например,

<p align=center>proproprogs.ru/index

<p>Чтобы одну и ту
же страницу отобразить по нескольким URL-адресам, следует добавить
несколько конструкций route:

<p>@app.route(&quot;/index&quot;)
<br>@app.route(&quot;/&quot;)
<br>def index():
<br>    return &quot;index&quot;

<p>Соответственно,
для любого другого адреса мы также можем добавить свой отдельный обработчик,
прописав еще один декоратор route:

<p>@app.route(&quot;/about&quot;)
<br>def about():
<br>    return &quot;&lt;h1&gt;О сайте&lt;/h1&gt;&quot;

<p>Теперь на нашем
сайте как бы две страницы: главная и /about – о сайте. Причем,
наши обработчики возвращают HTML-документ и все теги будут
соответственно отображаться на странице в браузере.

